-- Code generated by ./test_AlgType.pl on Wed Feb 18 14:54:51 2015
module Main where
import Data.Typeable ( typeOf )
-- import Data.List ( intercalate )
import FFIGenerator.TypeToPerl (  typeToPerl ) 
import FFIGenerator.GetTypes ( getFFITypes, hasSimpleSig, getTypes )
import FFIGenerator.GenerateCode ( createHaskellWrapper, createCWrapper, createCWrapperHeader )

import TestAlgType 
-- ( 
--         f1,
--         f2,
--         f3
--         )

module_name = "TestAlgType"
func_list =[
    ("f1", getFFITypes f1 , hasSimpleSig f1 , getTypes f1 ),
    ("f2", getFFITypes f2 , hasSimpleSig f2 , getTypes f2 ),
    ("f3", getFFITypes f3 , hasSimpleSig f3 , getTypes f3 )
  ]

-- So this generated module provides module_name and func_list 
-- To do so, it requires getFFITypes and hasSimpleSig from FFIGenerator.GetTypes
-- The functions that generate the code can go in FFIGenerator.GenerateCode
 
main = do
    createHaskellWrapper module_name func_list
    createCWrapper module_name func_list
    createCWrapperHeader module_name func_list
    putStrLn $ "f1 :: "++(typeToPerl (show(typeOf f1)))
    putStrLn $ "f2 :: "++(typeToPerl (show(typeOf f2)))
    putStrLn $ "f3 :: "++(typeToPerl (show(typeOf f3)))
--    mapM (\(f,ffit,fs,ft) -> putStrLn (f++" :: "++ (intercalate " -> " ft))) func_list
