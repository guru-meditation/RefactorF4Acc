--- module_LES_ocl_TEMPL.f95	2013-09-30 14:42:39.000000000 +0100
+++ module_LES_ocl.f95	2013-11-08 09:31:47.000000000 +0000
@@ -1,3 +1,5 @@
+!!! This code was generated on Fri Nov  8 09:29:58 2013 from module_LES_ocl_TEMPL.f95 using /Users/wim/SoC_Research/DPRI/LEScode/OpenCL/generate_OpenCL_API_calls_from_ACC_pragmas.pl
+!!! DON'T EDIT !!! Edit module_LES_ocl_TEMPL.f95 instead, and regenerate.
 #define IANIME 0
 #define IFBF 1
 module module_LES_ocl
@@ -22,9 +24,7 @@
         integer, parameter  :: jp = 150
         integer, parameter  :: kp = 90    
     ! Arguments
-!$ACC Arguments	
         real(kind=4), dimension(0:ip+2,0:jp+2,0:kp+1)  :: p
-!$ACC End Arguments	
         real(kind=4), dimension(0:ip+1,-1:jp+1,0:kp+1)  :: u
         real(kind=4), dimension(0:ip+1,-1:jp+1,0:kp+1)  :: v
         real(kind=4), dimension(0:ip+1,-1:jp+1,-1:kp+1)  :: w
@@ -69,16 +69,13 @@
         real(kind=4), dimension(-1:ip+1,0:jp+1,0:kp+1)  :: bmask1
         real(kind=4), dimension(0:ip+1,-1:jp+1,0:kp+1)  :: cmask1
         real(kind=4), dimension(0:ip+1,0:jp+1,0:kp+1)  :: dmask1
-!$ACC Arguments
         real(kind=4), dimension(ip,jp,kp)  :: cn1
-!$ACC End Arguments
         real(kind=4), dimension(ip)  :: cn2l
         real(kind=4), dimension(ip)  :: cn2s
         real(kind=4), dimension(jp)  :: cn3l
         real(kind=4), dimension(jp)  :: cn3s
         real(kind=4), dimension(kp)  :: cn4l
         real(kind=4), dimension(kp)  :: cn4s
-!$ACC Arguments
         real(kind=4), dimension(0:ip+1,0:jp+1,0:kp+1)  :: rhs
         real(kind=4), dimension(-1:ip+1,-1:jp+1,0:kp+1)  :: sm
         real(kind=4), dimension(0:ip)  :: dxs
@@ -88,19 +85,15 @@
         real(kind=4), dimension(0:jp+1)  :: dy1
         real(kind=4), dimension(-1:kp+2)  :: dzn
         real(kind=4), dimension(kp+2)  :: z2        
-!$ACC End Arguments
        
-!$ACC ConstArguments
         real(kind=4) :: dt
         integer :: im
         integer :: jm
         integer :: km
         integer :: nmax
-!$ACC End ConstArguments
 
 ! -----------------------------------------------------------------------
 ! Combined arrays for OpenCL kernels
-!$ACC Arguments	
         real(kind=4), dimension(0:3,0:ip+1,-1:jp+1,-1:kp+1)  :: uvw
         real(kind=4), dimension(0:3,0:ip,0:jp,0:kp)  :: fgh
         real(kind=4), dimension(0:3,ip,jp,kp)  :: fgh_old
@@ -110,7 +103,6 @@
         real(kind=4), dimension(0:3,0:ip+1,-1:jp+1,-1:kp+1)  :: mask1
         real(kind=4), dimension(1:2*(ip+jp+kp))  :: cn234ls
         integer, dimension(0:1) :: n_state
-!$ACC End Arguments
 
         ! OpenCL-specific declarations
         integer :: nunits
@@ -118,10 +110,50 @@
         character(10) :: kstr
         character(17) :: srcstr
 
-!$ACC BufDecls
+! OpenCL buffer declarations
+        integer(8) :: p_buf
+        integer(8) :: cn1_buf
+        integer(8) :: rhs_buf
+        integer(8) :: sm_buf
+        integer(8) :: dxs_buf
+        integer(8) :: dys_buf
+        integer(8) :: dzs_buf
+        integer(8) :: dx1_buf
+        integer(8) :: dy1_buf
+        integer(8) :: dzn_buf
+        integer(8) :: z2_buf
+        integer(8) :: uvw_buf
+        integer(8) :: fgh_buf
+        integer(8) :: fgh_old_buf
+        integer(8) :: cov_buf
+        integer(8) :: diu_buf
+        integer(8) :: nou_buf
+        integer(8) :: mask1_buf
+        integer(8) :: cn234ls_buf
+        integer(8) :: n_state_buf
 
 ! Sizes
-!$ACC SizeDecls
+        ! OpenCL buffer size declarations
+        integer, dimension(3):: p_sz
+        integer, dimension(3):: cn1_sz
+        integer, dimension(3):: rhs_sz
+        integer, dimension(3):: sm_sz
+        integer, dimension(1):: dxs_sz
+        integer, dimension(1):: dys_sz
+        integer, dimension(1):: dzs_sz
+        integer, dimension(1):: dx1_sz
+        integer, dimension(1):: dy1_sz
+        integer, dimension(1):: dzn_sz
+        integer, dimension(1):: z2_sz
+        integer, dimension(4):: uvw_sz
+        integer, dimension(4):: fgh_sz
+        integer, dimension(4):: fgh_old_sz
+        integer, dimension(4):: cov_sz
+        integer, dimension(4):: diu_sz
+        integer, dimension(4):: nou_sz
+        integer, dimension(4):: mask1_sz
+        integer, dimension(1):: cn234ls_sz
+        integer, dimension(1):: n_state_sz
 
  ! Convert to new format
         call convert_to_uvw(u,v,w,uvw)
@@ -144,17 +176,101 @@
         
         ! Create OpenCL buffers
 
-!$ACC MakeSizes        
+        ! OpenCL buffer sizes
+        p_sz = shape(p)
+        cn1_sz = shape(cn1)
+        rhs_sz = shape(rhs)
+        sm_sz = shape(sm)
+        dxs_sz = shape(dxs)
+        dys_sz = shape(dys)
+        dzs_sz = shape(dzs)
+        dx1_sz = shape(dx1)
+        dy1_sz = shape(dy1)
+        dzn_sz = shape(dzn)
+        z2_sz = shape(z2)
+        uvw_sz = shape(uvw)
+        fgh_sz = shape(fgh)
+        fgh_old_sz = shape(fgh_old)
+        cov_sz = shape(cov)
+        diu_sz = shape(diu)
+        nou_sz = shape(nou)
+        mask1_sz = shape(mask1)
+        cn234ls_sz = shape(cn234ls)
+        n_state_sz = shape(n_state)
 
         n_state(0)=0
         n_state(1)=0
 
-!$ACC MakeBuffers
-
-!$ACC SetArgs
+        ! Create OpenCL buffers
+        call oclMake3DFloatArrayReadWriteBuffer(p_buf,p_sz,p)
+        call oclMake3DFloatArrayReadWriteBuffer(cn1_buf,cn1_sz,cn1)
+        call oclMake3DFloatArrayReadWriteBuffer(rhs_buf,rhs_sz,rhs)
+        call oclMake3DFloatArrayReadWriteBuffer(sm_buf,sm_sz,sm)
+        call oclMake1DFloatArrayReadWriteBuffer(dxs_buf,dxs_sz,dxs)
+        call oclMake1DFloatArrayReadWriteBuffer(dys_buf,dys_sz,dys)
+        call oclMake1DFloatArrayReadWriteBuffer(dzs_buf,dzs_sz,dzs)
+        call oclMake1DFloatArrayReadWriteBuffer(dx1_buf,dx1_sz,dx1)
+        call oclMake1DFloatArrayReadWriteBuffer(dy1_buf,dy1_sz,dy1)
+        call oclMake1DFloatArrayReadWriteBuffer(dzn_buf,dzn_sz,dzn)
+        call oclMake1DFloatArrayReadWriteBuffer(z2_buf,z2_sz,z2)
+        call oclMake4DFloatArrayReadWriteBuffer(uvw_buf,uvw_sz,uvw)
+        call oclMake4DFloatArrayReadWriteBuffer(fgh_buf,fgh_sz,fgh)
+        call oclMake4DFloatArrayReadWriteBuffer(fgh_old_buf,fgh_old_sz,fgh_old)
+        call oclMake4DFloatArrayReadWriteBuffer(cov_buf,cov_sz,cov)
+        call oclMake4DFloatArrayReadWriteBuffer(diu_buf,diu_sz,diu)
+        call oclMake4DFloatArrayReadWriteBuffer(nou_buf,nou_sz,nou)
+        call oclMake4DFloatArrayReadWriteBuffer(mask1_buf,mask1_sz,mask1)
+        call oclMake1DFloatArrayReadWriteBuffer(cn234ls_buf,cn234ls_sz,cn234ls)
+        call oclMake1DIntArrayReadWriteBuffer(n_state_buf,n_state_sz,n_state)
+
+        ! Set OpenCL argument order
+        call oclSetFloatArrayArg(0, p_buf )
+        call oclSetFloatArrayArg(1, cn1_buf )
+        call oclSetFloatArrayArg(2, rhs_buf )
+        call oclSetFloatArrayArg(3, sm_buf )
+        call oclSetFloatArrayArg(4, dxs_buf )
+        call oclSetFloatArrayArg(5, dys_buf )
+        call oclSetFloatArrayArg(6, dzs_buf )
+        call oclSetFloatArrayArg(7, dx1_buf )
+        call oclSetFloatArrayArg(8, dy1_buf )
+        call oclSetFloatArrayArg(9, dzn_buf )
+        call oclSetFloatArrayArg(10, z2_buf )
+        call oclSetFloatArrayArg(11, uvw_buf )
+        call oclSetFloatArrayArg(12, fgh_buf )
+        call oclSetFloatArrayArg(13, fgh_old_buf )
+        call oclSetFloatArrayArg(14, cov_buf )
+        call oclSetFloatArrayArg(15, diu_buf )
+        call oclSetFloatArrayArg(16, nou_buf )
+        call oclSetFloatArrayArg(17, mask1_buf )
+        call oclSetFloatArrayArg(18, cn234ls_buf )
+        call oclSetIntArrayArg(19, n_state_buf )
+        call oclSetFloatConstArg(20, dt )
+        call oclSetIntConstArg(21, im )
+        call oclSetIntConstArg(22, jm )
+        call oclSetIntConstArg(23, km )
+        call oclSetIntConstArg(24, nmax )
     
     ! Copy all arrays required for the full run
-!$ACC WriteBuffers
+        call oclWrite3DFloatArrayBuffer(p_buf,p_sz,p)
+        call oclWrite3DFloatArrayBuffer(cn1_buf,cn1_sz,cn1)
+        call oclWrite3DFloatArrayBuffer(rhs_buf,rhs_sz,rhs)
+        call oclWrite3DFloatArrayBuffer(sm_buf,sm_sz,sm)
+        call oclWrite1DFloatArrayBuffer(dxs_buf,dxs_sz,dxs)
+        call oclWrite1DFloatArrayBuffer(dys_buf,dys_sz,dys)
+        call oclWrite1DFloatArrayBuffer(dzs_buf,dzs_sz,dzs)
+        call oclWrite1DFloatArrayBuffer(dx1_buf,dx1_sz,dx1)
+        call oclWrite1DFloatArrayBuffer(dy1_buf,dy1_sz,dy1)
+        call oclWrite1DFloatArrayBuffer(dzn_buf,dzn_sz,dzn)
+        call oclWrite1DFloatArrayBuffer(z2_buf,z2_sz,z2)
+        call oclWrite4DFloatArrayBuffer(uvw_buf,uvw_sz,uvw)
+        call oclWrite4DFloatArrayBuffer(fgh_buf,fgh_sz,fgh)
+        call oclWrite4DFloatArrayBuffer(fgh_old_buf,fgh_old_sz,fgh_old)
+        call oclWrite4DFloatArrayBuffer(cov_buf,cov_sz,cov)
+        call oclWrite4DFloatArrayBuffer(diu_buf,diu_sz,diu)
+        call oclWrite4DFloatArrayBuffer(nou_buf,nou_sz,nou)
+        call oclWrite4DFloatArrayBuffer(mask1_buf,mask1_sz,mask1)
+        call oclWrite1DFloatArrayBuffer(cn234ls_buf,cn234ls_sz,cn234ls)
+        call oclWrite1DIntArrayBuffer(n_state_buf,n_state_sz,n_state)
      
     ! Following buffers are used in the loop, assign to module-level buffer array for convenience
 
