-- Code generated by test_F95StatementParser.pl on Sun Jul 10 12:49:07 2016
module Main where
import Data.Typeable ( typeOf )
-- import Data.List ( intercalate )
import FFIGenerator.TypeToPerl (  typeToPerl ) 
import FFIGenerator.GetTypes ( getFFITypes, hasSimpleSig, getTypes )
import FFIGenerator.GenerateCode ( createHaskellWrapper, createCWrapper, createCWrapperHeader )

import F95StatementParser 
-- ( 
--         parseF95Statement,
--         parseF95Decl
--         )

module_name = "F95StatementParser"
func_list =[
    ("parseF95Statement", getFFITypes parseF95Statement , hasSimpleSig parseF95Statement , getTypes parseF95Statement ),
    ("parseF95Decl", getFFITypes parseF95Decl , hasSimpleSig parseF95Decl , getTypes parseF95Decl )
  ]

-- So this generated module provides module_name and func_list 
-- To do so, it requires getFFITypes and hasSimpleSig from FFIGenerator.GetTypes
-- The functions that generate the code can go in FFIGenerator.GenerateCode
 
main = do
    createHaskellWrapper module_name func_list
    createCWrapper module_name func_list
    createCWrapperHeader module_name func_list
    putStrLn $ "parseF95Statement :: "++(typeToPerl (show(typeOf parseF95Statement)))
    putStrLn $ "parseF95Decl :: "++(typeToPerl (show(typeOf parseF95Decl)))
--    mapM (\(f,ffit,fs,ft) -> putStrLn (f++" :: "++ (intercalate " -> " ft))) func_list
