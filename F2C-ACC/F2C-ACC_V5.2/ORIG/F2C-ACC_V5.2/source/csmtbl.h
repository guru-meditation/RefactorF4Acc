	/* This is an initialized obstack */

static struct {char *l; void *p; char c[1359];} csm_data = {
	&(csm_data.c[1359]),
	0,
"\0\
accdata\0\
accdo\0\
parallel\0\
unroll\0\
vector\0\
accroutine\0\
accsync\0\
accthread\0\
end\0\
begin\0\
aligned\0\
nonperiodic\0\
periodic\0\
cpu\0\
demote\0\
gpu\0\
promote\0\
constant\0\
extern\0\
global\0\
local\0\
shared\0\
in\0\
inout\0\
none\0\
out\0\
go\0\
to\0\
goto\0\
smsexchange\0\
accregion\0\
.false.\0\
.true.\0\
chunk\0\
block\0\
thread\0\
unstructured\0\
private\0\
public\0\
allocatable\0\
allocate\0\
stat=\0\
.and.\0\
if\0\
assign\0\
dimension\0\
external\0\
intent\0\
intrinsic\0\
optional\0\
parameter\0\
pointer\0\
save\0\
target\0\
backspace\0\
data\0\
blockdata\0\
call\0\
default\0\
case\0\
kind=\0\
len=\0\
err=\0\
iostat=\0\
status=\0\
unit=\0\
close\0\
common\0\
null\0\
access=\0\
action=\0\
blank=\0\
delim=\0\
file=\0\
form=\0\
pad=\0\
position=\0\
recl=\0\
contains\0\
continue\0\
cycle\0\
deallocate\0\
type\0\
smsparallel\0\
else\0\
then\0\
elseif\0\
elsewhere\0\
endblock\0\
endblockdata\0\
do\0\
enddo\0\
forall\0\
endforall\0\
function\0\
endfunction\0\
endif\0\
interface\0\
endinterface\0\
module\0\
endmodule\0\
program\0\
endprogram\0\
select\0\
endselect\0\
subroutine\0\
endsubroutine\0\
endtype\0\
where\0\
endwhere\0\
file\0\
endfile\0\
entry\0\
result\0\
.eqv.\0\
.neqv.\0\
equivalence\0\
exit\0\
format\0\
assignment\0\
operator\0\
implicit\0\
direct=\0\
exist=\0\
formatted=\0\
name=\0\
named=\0\
nextrec=\0\
number=\0\
opened=\0\
read=\0\
readwrite=\0\
sequential=\0\
unformatted=\0\
write=\0\
inquire\0\
iolength=\0\
advance=\0\
end=\0\
eor=\0\
fmt=\0\
nml=\0\
rec=\0\
size=\0\
while\0\
procedure\0\
namelist\0\
.not.\0\
nullify\0\
open\0\
.or.\0\
pause\0\
elemental\0\
pure\0\
recursive\0\
print\0\
sequence\0\
read\0\
.eq.\0\
.ge.\0\
.gt.\0\
.le.\0\
.lt.\0\
.ne.\0\
return\0\
rewind\0\
selectcase\0\
stop\0\
byte\0\
character\0\
complex\0\
double\0\
precision\0\
doubleprecision\0\
integer\0\
logical\0\
real\0\
sse\0\
only\0\
write\0\
fortran"};

struct obstack csm_obstack =
	obstack_known_chunk(&csm_data,
	&(csm_data.c[1359]), &(csm_data.c[1359]), &(csm_data.c[1359]),
	4096, 1);

	/* This is an initialized obstack */

static struct {char **l; void *p; char *c[182];} csm_indx = {
	&(csm_indx.c[182]),
	0,{
	&(csm_data.c[0]),
	&(csm_data.c[1]),
	&(csm_data.c[9]),
	&(csm_data.c[15]),
	&(csm_data.c[24]),
	&(csm_data.c[31]),
	&(csm_data.c[38]),
	&(csm_data.c[49]),
	&(csm_data.c[57]),
	&(csm_data.c[67]),
	&(csm_data.c[71]),
	&(csm_data.c[77]),
	&(csm_data.c[85]),
	&(csm_data.c[97]),
	&(csm_data.c[106]),
	&(csm_data.c[110]),
	&(csm_data.c[117]),
	&(csm_data.c[121]),
	&(csm_data.c[129]),
	&(csm_data.c[138]),
	&(csm_data.c[145]),
	&(csm_data.c[152]),
	&(csm_data.c[158]),
	&(csm_data.c[165]),
	&(csm_data.c[168]),
	&(csm_data.c[174]),
	&(csm_data.c[179]),
	&(csm_data.c[183]),
	&(csm_data.c[186]),
	&(csm_data.c[189]),
	&(csm_data.c[194]),
	&(csm_data.c[206]),
	&(csm_data.c[216]),
	&(csm_data.c[224]),
	&(csm_data.c[231]),
	&(csm_data.c[237]),
	&(csm_data.c[243]),
	&(csm_data.c[250]),
	&(csm_data.c[263]),
	&(csm_data.c[271]),
	&(csm_data.c[278]),
	&(csm_data.c[290]),
	&(csm_data.c[299]),
	&(csm_data.c[305]),
	&(csm_data.c[311]),
	&(csm_data.c[314]),
	&(csm_data.c[321]),
	&(csm_data.c[331]),
	&(csm_data.c[340]),
	&(csm_data.c[347]),
	&(csm_data.c[357]),
	&(csm_data.c[366]),
	&(csm_data.c[376]),
	&(csm_data.c[384]),
	&(csm_data.c[389]),
	&(csm_data.c[396]),
	&(csm_data.c[406]),
	&(csm_data.c[411]),
	&(csm_data.c[421]),
	&(csm_data.c[426]),
	&(csm_data.c[434]),
	&(csm_data.c[439]),
	&(csm_data.c[445]),
	&(csm_data.c[450]),
	&(csm_data.c[455]),
	&(csm_data.c[463]),
	&(csm_data.c[471]),
	&(csm_data.c[477]),
	&(csm_data.c[483]),
	&(csm_data.c[490]),
	&(csm_data.c[495]),
	&(csm_data.c[503]),
	&(csm_data.c[511]),
	&(csm_data.c[518]),
	&(csm_data.c[525]),
	&(csm_data.c[531]),
	&(csm_data.c[537]),
	&(csm_data.c[542]),
	&(csm_data.c[552]),
	&(csm_data.c[558]),
	&(csm_data.c[567]),
	&(csm_data.c[576]),
	&(csm_data.c[582]),
	&(csm_data.c[593]),
	&(csm_data.c[598]),
	&(csm_data.c[610]),
	&(csm_data.c[615]),
	&(csm_data.c[620]),
	&(csm_data.c[627]),
	&(csm_data.c[637]),
	&(csm_data.c[646]),
	&(csm_data.c[659]),
	&(csm_data.c[662]),
	&(csm_data.c[668]),
	&(csm_data.c[675]),
	&(csm_data.c[685]),
	&(csm_data.c[694]),
	&(csm_data.c[706]),
	&(csm_data.c[712]),
	&(csm_data.c[722]),
	&(csm_data.c[735]),
	&(csm_data.c[742]),
	&(csm_data.c[752]),
	&(csm_data.c[760]),
	&(csm_data.c[771]),
	&(csm_data.c[778]),
	&(csm_data.c[788]),
	&(csm_data.c[799]),
	&(csm_data.c[813]),
	&(csm_data.c[821]),
	&(csm_data.c[827]),
	&(csm_data.c[836]),
	&(csm_data.c[841]),
	&(csm_data.c[849]),
	&(csm_data.c[855]),
	&(csm_data.c[862]),
	&(csm_data.c[868]),
	&(csm_data.c[875]),
	&(csm_data.c[887]),
	&(csm_data.c[892]),
	&(csm_data.c[899]),
	&(csm_data.c[910]),
	&(csm_data.c[919]),
	&(csm_data.c[928]),
	&(csm_data.c[936]),
	&(csm_data.c[943]),
	&(csm_data.c[954]),
	&(csm_data.c[960]),
	&(csm_data.c[967]),
	&(csm_data.c[976]),
	&(csm_data.c[984]),
	&(csm_data.c[992]),
	&(csm_data.c[998]),
	&(csm_data.c[1009]),
	&(csm_data.c[1021]),
	&(csm_data.c[1034]),
	&(csm_data.c[1041]),
	&(csm_data.c[1049]),
	&(csm_data.c[1059]),
	&(csm_data.c[1068]),
	&(csm_data.c[1073]),
	&(csm_data.c[1078]),
	&(csm_data.c[1083]),
	&(csm_data.c[1088]),
	&(csm_data.c[1093]),
	&(csm_data.c[1099]),
	&(csm_data.c[1105]),
	&(csm_data.c[1115]),
	&(csm_data.c[1124]),
	&(csm_data.c[1130]),
	&(csm_data.c[1138]),
	&(csm_data.c[1143]),
	&(csm_data.c[1148]),
	&(csm_data.c[1154]),
	&(csm_data.c[1164]),
	&(csm_data.c[1169]),
	&(csm_data.c[1179]),
	&(csm_data.c[1185]),
	&(csm_data.c[1194]),
	&(csm_data.c[1199]),
	&(csm_data.c[1204]),
	&(csm_data.c[1209]),
	&(csm_data.c[1214]),
	&(csm_data.c[1219]),
	&(csm_data.c[1224]),
	&(csm_data.c[1229]),
	&(csm_data.c[1236]),
	&(csm_data.c[1243]),
	&(csm_data.c[1254]),
	&(csm_data.c[1259]),
	&(csm_data.c[1264]),
	&(csm_data.c[1274]),
	&(csm_data.c[1282]),
	&(csm_data.c[1289]),
	&(csm_data.c[1299]),
	&(csm_data.c[1315]),
	&(csm_data.c[1323]),
	&(csm_data.c[1331]),
	&(csm_data.c[1336]),
	&(csm_data.c[1340]),
	&(csm_data.c[1345]),
	&(csm_data.c[1351])}};

struct csmalign {char ___x; char *___d;};
static struct obstack csm_indx_obstk =
	obstack_known_chunk(&csm_indx, &(csm_indx.c[0]),
	&(csm_indx.c[182]), &(csm_indx.c[182]), 4096,
	((PTR_INT_TYPE) ((char *) &((struct csmalign *) 0)->___d - (char *) 0)));

char **strng = csm_indx.c;
int numstr = 182;

